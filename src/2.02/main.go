// Что выведет программа?
// Объяснить порядок выполнения defer функций и итоговый вывод.
package main

import "fmt"

func test() (x int) { // именованный возврат означает, что переменная x объявлена как возвращаемая,
                      // и все операции с x происходят непосредственно с этой переменной.

  defer func() { // здесь тоже замыкание, значит defer определяется на куче
	               // и в структуре лежит разыменованная ссылка
    x++
  }()
  x = 1
  return // возвращает x - т.к. ссылка, т.е. 
	       // в данном случае не создаётся отдельного временного слота
				 // дальше происходит вызов defer и инкрементируется x и return возвращает x - уже равный 2
				 //
				 // return вернул 2
}

func anotherTest() int {
  var x int // x = 0
  defer func() { // немедленно вычисляет аргументы и создает специальную структуру 
	               // для отложенного вызова - значения фиксируются в момент объявления.
								 // Но оно ссылка из-за замыкания.
    x++
  }()
  x = 1 // x = 1
  return x // компилятор создает временную переменную возврата, и присваивает ей значение x (например a = x).
           // дальше происходит вызов defer и инкрементируется x, но return возвращает копию (например a = 1), 
					 // хотя уже x = 2. 
					 // 
					 // return вернул 1
}

func main() {
  fmt.Println(test())
  fmt.Println(anotherTest())
}
